#include <iostream>
using namespace std;

struct Node
{
	int data;
	Node* next;

	Node(int item)
	{
		data = item;
		next = nullptr;
	}
};

class Queue
{
public:
	Node* rear;

	Queue()
	{
		rear = nullptr;
	}

	bool isEmpty()
	{
		if (rear == nullptr)
			return true;
		else
			return false;
	}

	void enqueue(int item)
	{
		Node* newNode = new Node(item);

		if (isEmpty())
		{
			rear = newNode;
			rear->next = newNode;
		}
		else
		{
			newNode->next = rear->next;
			rear->next = newNode;
			rear = newNode;
		}
	}

	void dequeue()
	{
		if (isEmpty())
		{
			cout << "Queue empty, cannot dequeue." << endl;
			return;
		}

		Node* front = rear->next;

		if (rear == front)
		{
			delete front;
			rear = nullptr;
		}
		else
		{
			rear->next = front->next;
			delete front;
		}
	}

	void getFront()
	{
		if (isEmpty())
		{
			cout << "Queue is empty." << endl;
			return;
		}

		Node* front = rear->next;
		cout << "Front of queue: " << front->data << endl;
	}

	void displayQueue()
	{
		if (isEmpty())
		{
			cout << "Queue is empty." << endl;
			return;
		}

		cout << "Queue(front to back): ";

		Node* temp = rear->next;
		do
		{
			cout << temp->data << " ";
			temp = temp->next;
		} while (temp != rear->next);
		cout << endl;
	}
};

int main()
{
	Queue q;

	q.enqueue(1);
	q.enqueue(2);
	q.enqueue(3);

	q.displayQueue();
	q.getFront();

	q.dequeue();
	q.dequeue();
	q.displayQueue();

	q.dequeue();
	q.displayQueue();
	q.dequeue();

	return 0;
}
